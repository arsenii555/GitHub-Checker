"""Track handler."""
from telethon.events import NewMessage
from ..client import HTTPClient
from ..utils import extract_owner_repo
from ..translation import load_translations


async def track_cmd_handler(http_client: HTTPClient, event: NewMessage.Event, ) -> None:
    """Handle /track command."""
    resp_msg: str
    user_id = event.chat_id
    locale = await http_client.get_user_locale(user_id)
    _ = load_translations(locale)
    msg_text = event.message.text
    match msg_text.split():
        case ["/track", link]:
            if extract_owner_repo(link) is None:
                resp_msg = _("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
            else:
                links = await http_client.list_links(user_id=user_id)
                if link not in links:
                    success = await http_client.track_link(user_id=user_id, link=link)
                    if success:
                        resp_msg = _("–°—Å—ã–ª–∫–∞\n{}\n—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ‚úÖ").format(link)
                    else:
                        resp_msg = _("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ ‚ùå")
                else:
                    resp_msg = _("üëÄ–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è üëÄ")
        case _:
            resp_msg = _("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:\n/track <link>")
    await event.client.send_message(
        entity=event.input_chat,
        message=resp_msg,
        reply_to=event.message,
    )
